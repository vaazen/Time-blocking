# time_block.py
from PyQt5.QtWidgets import (QWidget, QLabel, QVBoxLayout, QHBoxLayout, 
                             QMenu, QAction, QInputDialog, QLineEdit, 
                             QSizePolicy)
from PyQt5.QtCore import Qt, pyqtSignal, QPoint, QTimer, QPropertyAnimation, QEasingCurve
from PyQt5.QtGui import QMouseEvent, QFont, QPainter, QColor, QPen
from PyQt5.QtCore import QPropertyAnimation, QRect

class ResizableTimeBlock(QWidget):
    deleted = pyqtSignal(object)
    edited = pyqtSignal(object)
    color_changed = pyqtSignal(object, str)
    time_changed = pyqtSignal(object)
    resized = pyqtSignal(object)
    
    def __init__(self, start_time, end_time, title="", color=None, notify=True, parent=None):
        super().__init__(parent)
        self.start_time = start_time
        self.end_time = end_time
        self.title = title
        self.color = color or "#FF2B2B"
        self.notify = notify
        self.is_dragging = False
        self.is_resizing = False
        self.resize_edge = None  # 'top', 'bottom'
        self.drag_start_pos = None
        self.block_id = id(self)
        
        self.init_ui()
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.show_context_menu)
        self.setMouseTracking(True)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        self.animation = QPropertyAnimation(self, b"geometry")
        self.animation.setDuration(200)
        self.animation.setEasingCurve(QEasingCurve.OutCubic)
    
    def init_ui(self):
        self.setMinimumHeight(30)
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        
        layout = QVBoxLayout()
        layout.setContentsMargins(8, 4, 8, 4)
        layout.setSpacing(2)
        self.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_layout = QHBoxLayout()
        
        self.title_label = QLabel(self.title)
        self.title_label.setAlignment(Qt.AlignLeft)
        self.title_label.setStyleSheet(f"""
            color: white; 
            font-weight: bold; 
            font-size: 11px;
            background-color: {self.color};
            padding: 4px 8px;
            border-radius: 3px;
        """)
        title_layout.addWidget(self.title_label)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notify_indicator = QLabel("üîî" if self.notify else "üîï")
        self.notify_indicator.setToolTip("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" if self.notify else "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
        title_layout.addWidget(self.notify_indicator)
        
        layout.addLayout(title_layout)
        
        # –í—Ä–µ–º—è
        time_text = f"{self.start_time.strftime('%H:%M')} - {self.end_time.strftime('%H:%M')}"
        duration = (self.end_time - self.start_time).total_seconds() / 60
        time_text += f" ({int(duration)} –º–∏–Ω)"
        
        self.time_label = QLabel(time_text)
        self.time_label.setAlignment(Qt.AlignLeft)
        self.time_label.setStyleSheet("color: #CCCCCC; font-size: 9px;")
        layout.addWidget(self.time_label)
        
        self.update_style()
    
    def update_style(self):
        self.setStyleSheet(f"""
            ResizableTimeBlock {{
                background-color: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 {self.color}33, stop:0.5 {self.color}22, stop:1 {self.color}11);
                border: 2px solid {self.color};
                border-radius: 6px;
                margin: 1px;
            }}
            ResizableTimeBlock:hover {{
                border: 2px solid {self.color}CC;
                background-color: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 {self.color}55, stop:0.5 {self.color}44, stop:1 {self.color}33);
            }}
        """)
    
    def mousePressEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            pos = event.pos()
            height = self.height()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–ª–∏–∫–Ω—É–ª–∏ –ª–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω—é—é –∏–ª–∏ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            if pos.y() < 10:  # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
                self.is_resizing = True
                self.resize_edge = 'top'
            elif pos.y() > height - 10:  # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
                self.is_resizing = True
                self.resize_edge = 'bottom'
            else:  # –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
                self.is_dragging = True
                self.drag_start_pos = event.globalPos() - self.frameGeometry().topLeft()
            
            event.accept()
    
    def mouseMoveEvent(self, event: QMouseEvent):
        pos = event.pos()
        height = self.height()
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if pos.y() < 8 or pos.y() > height - 8:
            self.setCursor(Qt.SizeVerCursor)
        else:
            self.setCursor(Qt.ArrowCursor)
        
        if self.is_dragging and event.buttons() == Qt.LeftButton:
            # –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
            new_pos = event.globalPos() - self.drag_start_pos
            self.move(new_pos)
            self.time_changed.emit(self)
            event.accept()
        elif self.is_resizing and event.buttons() == Qt.LeftButton:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ - —ç–º—É–ª–∏—Ä—É–µ–º, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –≤–∏–¥–∂–µ—Ç–µ
            event.accept()
    
    def mouseReleaseEvent(self, event: QMouseEvent):
        self.is_dragging = False
        self.is_resizing = False
        self.resize_edge = None
        event.accept()
    
    def mouseDoubleClickEvent(self, event: QMouseEvent):
        self.edit_block()
        event.accept()
    
    def edit_block(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥"""
        from PyQt5.QtWidgets import QDialog, QDialogButtonBox, QFormLayout, QCheckBox
        
        dialog = QDialog(self)
        dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞")
        dialog.setMinimumWidth(300)
        
        layout = QFormLayout(dialog)
        
        title_edit = QLineEdit(self.title)
        layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", title_edit)
        
        start_time_edit = QLineEdit(self.start_time.strftime("%H:%M"))
        layout.addRow("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ß–ß:–ú–ú):", start_time_edit)
        
        end_time_edit = QLineEdit(self.end_time.strftime("%H:%M"))
        layout.addRow("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ß–ß:–ú–ú):", end_time_edit)
        
        notify_check = QCheckBox("–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ 2 –º–∏–Ω—É—Ç—ã –¥–æ –Ω–∞—á–∞–ª–∞")
        notify_check.setChecked(self.notify)
        layout.addRow(notify_check)
        
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(dialog.accept)
        buttons.rejected.connect(dialog.reject)
        layout.addRow(buttons)
        
        if dialog.exec_() == QDialog.Accepted:
            from datetime import datetime
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                new_start = datetime.strptime(start_time_edit.text(), "%H:%M").time()
                new_end = datetime.strptime(end_time_edit.text(), "%H:%M").time()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É, –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
                new_start_dt = self.start_time.replace(hour=new_start.hour, minute=new_start.minute)
                new_end_dt = self.end_time.replace(hour=new_end.hour, minute=new_end.minute)
                
                if new_start_dt < new_end_dt:
                    self.start_time = new_start_dt
                    self.end_time = new_end_dt
                    self.title = title_edit.text()
                    self.notify = notify_check.isChecked()
                    
                    self.update_display()
                    self.edited.emit(self)
            except ValueError:
                pass
    
    def update_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞"""
        time_text = f"{self.start_time.strftime('%H:%M')} - {self.end_time.strftime('%H:%M')}"
        duration = (self.end_time - self.start_time).total_seconds() / 60
        time_text += f" ({int(duration)} –º–∏–Ω)"
        
        self.title_label.setText(self.title)
        self.time_label.setText(time_text)
        self.notify_indicator.setText("üîî" if self.notify else "üîï")
        self.notify_indicator.setToolTip("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" if self.notify else "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
        self.update_style()
    
    def show_context_menu(self, pos):
        menu = QMenu(self)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        edit_action = QAction("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", self)
        edit_action.triggered.connect(self.edit_block)
        menu.addAction(edit_action)
        
        menu.addSeparator()
        
        # –¶–≤–µ—Ç–∞
        color_menu = QMenu("üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç", self)
        colors = ["#FF2B2B", "#FF4444", "#FF6B6B", "#FF8B8B", 
                 "#FF4C4C", "#FF6666", "#FF8C8C", "#FFAAAA"]
        
        for color in colors:
            color_action = QAction("‚ñ†", self)
            color_action.setStyleSheet(f"color: {color}; font-size: 16px; font-weight: bold;")
            color_action.triggered.connect(lambda checked, c=color: self.set_color(c))
            color_menu.addAction(color_action)
        
        menu.addMenu(color_menu)
        
        menu.addSeparator()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notify_action = QAction("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª" if not self.notify else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª", self)
        notify_action.triggered.connect(self.toggle_notifications)
        menu.addAction(notify_action)
        
        menu.addSeparator()
        
        # –£–¥–∞–ª–∏—Ç—å
        delete_action = QAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", self)
        delete_action.triggered.connect(lambda: self.deleted.emit(self))
        menu.addAction(delete_action)
        
        menu.exec_(self.mapToGlobal(pos))
    
    def set_color(self, color):
        self.color = color
        self.update_style()
        self.title_label.setStyleSheet(f"""
            color: white; 
            font-weight: bold; 
            font-size: 11px;
            background-color: {color};
            padding: 4px 8px;
            border-radius: 3px;
        """)
        self.color_changed.emit(self, color)
    
    def toggle_notifications(self):
        self.notify = not self.notify
        self.notify_indicator.setText("üîî" if self.notify else "üîï")
        self.notify_indicator.setToolTip("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" if self.notify else "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
    
    def get_duration_minutes(self):
        return int((self.end_time - self.start_time).total_seconds() / 60)
    
    def paintEvent(self, event):
        super().paintEvent(event)
        # –†–∏—Å—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        painter = QPainter(self)
        painter.setPen(QPen(QColor(255, 255, 255, 128), 2))
        
        # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        painter.drawLine(10, 4, self.width() - 10, 4)
        # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        painter.drawLine(10, self.height() - 4, self.width() - 10, self.height() - 4)