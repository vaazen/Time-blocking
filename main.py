# main.py
import sys
import os
from datetime import datetime, timedelta
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
                             QWidget, QPushButton, QLabel, QScrollArea, QMessageBox,
                             QInputDialog, QColorDialog, QMenuBar, QAction, QFileDialog,
                             QDialog, QFormLayout, QDialogButtonBox, QCheckBox, QGroupBox,
                             QSpinBox, QComboBox, QSplitter, QSizePolicy, QFrame, QLineEdit)
from PyQt5.QtCore import Qt, QTimer, QPoint
from PyQt5.QtGui import QPainter, QPen, QColor, QFont, QMouseEvent

from styles import STYLESHEET
from time_block import ResizableTimeBlock
from time_scale import TimeScaleWidget
from data_manager import DataManager
from notification_manager import NotificationManager

class BlockCreationDialog(QDialog):
    def __init__(self, start_time, end_time, parent=None):
        super().__init__(parent)
        self.start_time = start_time
        self.end_time = end_time
        self.setup_ui()
    
    def setup_ui(self):
        self.setWindowTitle("–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞")
        self.setMinimumWidth(400)
        
        layout = QFormLayout(self)
        
        self.title_edit = QLineEdit()
        self.title_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", self.title_edit)
        
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        time_layout = QHBoxLayout()
        
        self.start_time_edit = QLineEdit(self.start_time.strftime("%H:%M"))
        time_layout.addWidget(QLabel("–°:"))
        time_layout.addWidget(self.start_time_edit)
        
        self.end_time_edit = QLineEdit(self.end_time.strftime("%H:%M"))
        time_layout.addWidget(QLabel("–î–æ:"))
        time_layout.addWidget(self.end_time_edit)
        
        layout.addRow("–í—Ä–µ–º—è:", time_layout)
        
        # –¶–≤–µ—Ç
        self.color_combo = QComboBox()
        colors = ["#FF2B2B", "#FF4444", "#FF6B6B", "#FF8B8B", 
                 "#FF4C4C", "#FF6666", "#FF8C8C", "#FFAAAA"]
        for color in colors:
            self.color_combo.addItem("‚ñ†", color)
            self.color_combo.setItemData(self.color_combo.count()-1, color, Qt.BackgroundRole)
        layout.addRow("–¶–≤–µ—Ç:", self.color_combo)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notify_check = QCheckBox("–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ 2 –º–∏–Ω—É—Ç—ã –¥–æ –Ω–∞—á–∞–ª–∞")
        self.notify_check.setChecked(True)
        layout.addRow("", self.notify_check)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.validate_and_accept)
        buttons.rejected.connect(self.reject)
        layout.addRow(buttons)
    
    def validate_and_accept(self):
        if not self.title_edit.text().strip():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
            return
        
        try:
            start = datetime.strptime(self.start_time_edit.text(), "%H:%M").time()
            end = datetime.strptime(self.end_time_edit.text(), "%H:%M").time()
            
            if start >= end:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞")
                return
                
            self.accept()
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú)")
    
    def get_data(self):
        start = datetime.strptime(self.start_time_edit.text(), "%H:%M").time()
        end = datetime.strptime(self.end_time_edit.text(), "%H:%M").time()
        
        return {
            "title": self.title_edit.text(),
            "start_time": start,
            "end_time": end,
            "color": self.color_combo.currentData(),
            "notify": self.notify_check.isChecked()
        }

class TimeBlockingApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.time_blocks = []
        self.dragging_block = None
        self.drag_start_pos = None
        self.current_date = datetime.now().date()
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.data_manager = DataManager()
        self.notification_manager = NotificationManager(self)
        self.notification_manager.notification_triggered.connect(self.show_notification)
        
        self.init_ui()
        self.setup_menubar()
        self.setup_statusbar()
        self.start_timers()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        self.load_current_day()
    
    def init_ui(self):
        self.setWindowTitle("Time Blocking Planner - –ß–µ—Ä–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π —Å—Ç–∏–ª—å")
        self.setGeometry(100, 100, 1400, 900)
        self.setStyleSheet(STYLESHEET)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout()
        central_widget.setLayout(main_layout)
        
        # –ü–∞–Ω–µ–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –¥–∞—Ç–æ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        self.setup_header(main_layout)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_splitter = QSplitter(Qt.Horizontal)
        main_layout.addWidget(content_splitter)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —à–∫–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏
        self.time_scale = TimeScaleWidget()
        self.time_scale.setMinimumWidth(100)
        content_splitter.addWidget(self.time_scale)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –æ–±–ª–∞—Å—Ç—å –±–ª–æ–∫–æ–≤
        self.setup_blocks_area(content_splitter)
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.setup_stats_bar(main_layout)
        
        content_splitter.setSizes([100, 1300])
    
    def setup_header(self, layout):
        header_widget = QWidget()
        header_layout = QHBoxLayout(header_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π
        self.date_label = QLabel()
        self.update_date_display()
        self.date_label.setObjectName("title")
        header_layout.addWidget(self.date_label)
        
        header_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons = [
            ("üìÖ –ù–æ–≤—ã–π –¥–µ–Ω—å", self.new_day),
            ("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self.save_current_day),
            ("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å", self.load_specific_day),
            ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.show_settings),
            ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", self.show_stats),
            ("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", self.toggle_notifications)
        ]
        
        for text, slot in buttons:
            btn = QPushButton(text)
            btn.clicked.connect(slot)
            btn.setMaximumWidth(120)
            header_layout.addWidget(btn)
        
        layout.addWidget(header_widget)
    
    def setup_blocks_area(self, splitter):
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –±–ª–æ–∫–æ–≤
        blocks_container = QWidget()
        blocks_layout = QVBoxLayout(blocks_container)
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        # –í–∏–¥–∂–µ—Ç –¥–ª—è –±–ª–æ–∫–æ–≤
        self.blocks_widget = QWidget()
        self.blocks_widget.setMouseTracking(True)
        self.blocks_widget.mousePressEvent = self.handle_canvas_click
        self.blocks_layout = QVBoxLayout(self.blocks_widget)
        self.blocks_layout.setAlignment(Qt.AlignTop)
        
        self.scroll_area.setWidget(self.blocks_widget)
        blocks_layout.addWidget(self.scroll_area)
        
        splitter.addWidget(blocks_container)
    
    def setup_stats_bar(self, layout):
        stats_widget = QFrame()
        stats_widget.setFrameStyle(QFrame.StyledPanel)
        stats_layout = QHBoxLayout(stats_widget)
        
        self.stats_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        stats_layout.addWidget(self.stats_label)
        
        stats_layout.addStretch()
        
        self.productivity_label = QLabel("–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: --%")
        stats_layout.addWidget(self.productivity_label)
        
        layout.addWidget(stats_widget)
    
    def setup_menubar(self):
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = menubar.addMenu("üìÅ –§–∞–π–ª")
        file_menu.addAction("üìÖ –ù–æ–≤—ã–π –¥–µ–Ω—å", self.new_day, "Ctrl+N")
        file_menu.addAction("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self.save_current_day, "Ctrl+S")
        file_menu.addAction("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–Ω—å...", self.load_specific_day)
        file_menu.addSeparator()
        file_menu.addAction("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON...", self.export_data)
        file_menu.addAction("üì• –ò–º–ø–æ—Ä—Ç –∏–∑ JSON...", self.import_data)
        file_menu.addSeparator()
        file_menu.addAction("üö™ –í—ã—Ö–æ–¥", self.close, "Ctrl+Q")
        
        # –ú–µ–Ω—é –ü—Ä–∞–≤–∫–∞
        edit_menu = menubar.addMenu("‚úèÔ∏è –ü—Ä–∞–≤–∫–∞")
        edit_menu.addAction("‚ûï –°–æ–∑–¥–∞—Ç—å –±–ª–æ–∫", self.create_block_dialog, "Insert")
        edit_menu.addAction("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", self.clear_all_blocks)
        
        # –ú–µ–Ω—é –í–∏–¥
        view_menu = menubar.addMenu("üëÅÔ∏è –í–∏–¥")
        view_menu.addAction("üïê –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", self.toggle_current_time_display)
        view_menu.addAction("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", self.show_stats)
        
        # –ú–µ–Ω—é –ü–æ–º–æ—â—å
        help_menu = menubar.addMenu("‚ùì –ü–æ–º–æ—â—å")
        help_menu.addAction("üìñ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self.show_about)
        help_menu.addAction("üéØ –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", self.show_tips)
    
    def setup_statusbar(self):
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def start_timers(self):
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self.time_timer = QTimer()
        self.time_timer.timeout.connect(self.update_current_time_display)
        self.time_timer.start(1000)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_manager.start()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.autosave_timer = QTimer()
        self.autosave_timer.timeout.connect(self.autosave)
        self.autosave_timer.start(300000)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    
    def handle_canvas_click(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –ø–æ –∫–ª–∏–∫—É
            y_pos = event.pos().y()
            start_minutes = 8 * 60 + (y_pos // 2)  # 2 –ø–∏–∫—Å–µ–ª—è = 1 –º–∏–Ω—É—Ç–∞
            duration = 60  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            start_time = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(minutes=start_minutes)
            end_time = start_time + timedelta(minutes=duration)
            
            dialog = BlockCreationDialog(start_time, end_time, self)
            if dialog.exec_() == QDialog.Accepted:
                data = dialog.get_data()
                self.create_time_block(data)
    
    def create_time_block(self, data):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫"""
        start_dt = datetime.combine(self.current_date, data["start_time"])
        end_dt = datetime.combine(self.current_date, data["end_time"])
        
        block = ResizableTimeBlock(start_dt, end_dt, data["title"], data["color"], data["notify"])
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        block.deleted.connect(self.delete_time_block)
        block.edited.connect(self.edit_time_block)
        block.color_changed.connect(self.change_block_color)
        block.time_changed.connect(self.on_block_time_changed)
        
        self.time_blocks.append(block)
        self.blocks_layout.addWidget(block)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if data["notify"]:
            self.notification_manager.add_notification(block.block_id, start_dt, data["title"])
        
        self.update_stats()
        self.statusBar().showMessage(f"–°–æ–∑–¥–∞–Ω –±–ª–æ–∫: {data['title']}")
    
    def delete_time_block(self, block):
        reply = QMessageBox.question(self, "–£–¥–∞–ª–µ–Ω–∏–µ", 
                                   f"–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ '{block.title}'?",
                                   QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.notification_manager.remove_notification(block.block_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            block.deleteLater()
            self.time_blocks.remove(block)
            
            self.update_stats()
            self.statusBar().showMessage("–ë–ª–æ–∫ —É–¥–∞–ª–µ–Ω")
    
    def edit_time_block(self, block):
        # –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.notification_manager.remove_notification(block.block_id)
        if block.notify:
            self.notification_manager.add_notification(block.block_id, block.start_time, block.title)
        
        self.update_stats()
        self.statusBar().showMessage(f"–ë–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {block.title}")
    
    def change_block_color(self, block, color):
        self.statusBar().showMessage(f"–¶–≤–µ—Ç –±–ª–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω")
    
    def on_block_time_changed(self, block):
        self.update_stats()
    
    def new_day(self):
        reply = QMessageBox.question(self, "–ù–æ–≤—ã–π –¥–µ–Ω—å", 
                                   "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π?",
                                   QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)
        
        if reply == QMessageBox.Cancel:
            return
        
        if reply == QMessageBox.Yes:
            self.save_current_day()
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏
        self.clear_all_blocks()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
        self.current_date = datetime.now().date()
        self.update_date_display()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        self.load_current_day()
        
        self.statusBar().showMessage("–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–µ–Ω—å")
    
    def clear_all_blocks(self):
        reply = QMessageBox.question(self, "–û—á–∏—Å—Ç–∫–∞", 
                                   "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏?",
                                   QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            for block in self.time_blocks[:]:
                self.notification_manager.remove_notification(block.block_id)
                block.deleteLater()
            self.time_blocks.clear()
            
            self.notification_manager.clear_all()
            self.update_stats()
            self.statusBar().showMessage("–í—Å–µ –±–ª–æ–∫–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def save_current_day(self):
        if self.data_manager.save_day(self.time_blocks, self.current_date):
            self.statusBar().showMessage("–î–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            self.statusBar().showMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–Ω—è")
    
    def load_current_day(self):
        blocks_data = self.data_manager.load_day(self.current_date)
        
        for block_data in blocks_data:
            try:
                start_time = datetime.fromisoformat(block_data["start_time"])
                end_time = datetime.fromisoformat(block_data["end_time"])
                
                block = ResizableTimeBlock(
                    start_time, end_time,
                    block_data["title"],
                    block_data.get("color", "#FF2B2B"),
                    block_data.get("notify", True)
                )
                
                block.deleted.connect(self.delete_time_block)
                block.edited.connect(self.edit_time_block)
                block.color_changed.connect(self.change_block_color)
                block.time_changed.connect(self.on_block_time_changed)
                
                self.time_blocks.append(block)
                self.blocks_layout.addWidget(block)
                
                if block.notify:
                    self.notification_manager.add_notification(block.block_id, start_time, block.title)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª–æ–∫–∞: {e}")
        
        self.update_stats()
        self.statusBar().showMessage(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(blocks_data)} –±–ª–æ–∫–æ–≤")
    
    def load_specific_day(self):
        dates = self.data_manager.get_saved_dates()
        if not dates:
            QMessageBox.information(self, "–ó–∞–≥—Ä—É–∑–∫–∞", "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π")
            return
        
        date_str, ok = QInputDialog.getItem(
            self, "–í—ã–±–æ—Ä –¥–Ω—è", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
            [date.strftime("%Y-%m-%d (%A)") for date in dates],
            0, False
        )
        
        if ok and date_str:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–ª–æ–∫–∏
            self.clear_all_blocks()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
            selected_date = dates[[date.strftime("%Y-%m-%d (%A)") for date in dates].index(date_str)]
            self.current_date = selected_date
            self.update_date_display()
            self.load_current_day()
    
    def export_data(self):
        filename, _ = QFileDialog.getSaveFileName(
            self, "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", 
            f"timeblocking_export_{self.current_date.strftime('%Y-%m-%d')}.json",
            "JSON Files (*.json)"
        )
        
        if filename:
            if self.data_manager.export_to_json(self.time_blocks, filename):
                QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                QMessageBox.warning(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
    
    def import_data(self):
        filename, _ = QFileDialog.getOpenFileName(
            self, "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "", "JSON Files (*.json)"
        )
        
        if filename:
            blocks_data = self.data_manager.import_from_json(filename)
            if blocks_data:
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–ª–æ–∫–∏
                self.clear_all_blocks()
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                for block_data in blocks_data:
                    self.create_time_block(block_data)
                
                QMessageBox.information(self, "–ò–º–ø–æ—Ä—Ç", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    
    def show_settings(self):
        QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
    
    def toggle_notifications(self):
        enabled = not self.notification_manager.enabled
        self.notification_manager.set_enabled(enabled)
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        self.statusBar().showMessage(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
    
    def show_stats(self):
        total_blocks = len(self.time_blocks)
        total_minutes = sum(block.get_duration_minutes() for block in self.time_blocks)
        hours = total_minutes // 60
        minutes = total_minutes % 60
        
        productivity = min(100, int((total_minutes / 480) * 100))
        
        stats_text = f"""
        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {self.current_date.strftime('%d.%m.%Y')}</h3>
        <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤:</b> {total_blocks}<br>
        <b>–û–±—â–µ–µ –≤—Ä–µ–º—è:</b> {hours}—á {minutes}–º<br>
        <b>–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {productivity}%<br>
        <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–∏:</b> {hours:02d}:{minutes:02d}
        """
        
        QMessageBox.information(self, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", stats_text)
    
    def update_stats(self):
        total_blocks = len(self.time_blocks)
        total_minutes = sum(block.get_duration_minutes() for block in self.time_blocks)
        hours = total_minutes // 60
        minutes = total_minutes % 60
        
        productivity = min(100, int((total_minutes / 480) * 100))
        
        self.stats_label.setText(
            f"–ë–ª–æ–∫–æ–≤: {total_blocks} | "
            f"–í—Ä–µ–º—è: {hours:02d}:{minutes:02d} | "
            f"–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {productivity}%"
        )
    
    def update_date_display(self):
        today = datetime.now().date()
        date_str = self.current_date.strftime("%d %B %Y (%A)")
        
        if self.current_date == today:
            date_str += " - –°–ï–ì–û–î–ù–Ø"
        elif self.current_date > today:
            date_str += " - –ë–£–î–£–©–ï–ï"
        else:
            date_str += " - –ü–†–û–®–õ–û–ï"
        
        self.date_label.setText(f"üìÖ {date_str}")
    
    def update_current_time_display(self):
        self.time_scale.update()
        self.update()
    
    def toggle_current_time_display(self):
        pass
    
    def show_notification(self, title, message):
        QMessageBox.information(self, title, message)
        self.statusBar().showMessage(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")
    
    def show_about(self):
        about_text = """
        <h3>Time Blocking Planner</h3>
        <p><b>–í–µ—Ä—Å–∏—è:</b> 1.0</p>
        <p><b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–µ—Ç–æ–¥–∏–∫–æ–π —Ç–∞–π–º-–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</p>
        <p><b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞</p>
        <p><b>–õ–∏—Ü–µ–Ω–∑–∏—è:</b> MIT</p>
        <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç PyQt5 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</p>
        """
        QMessageBox.about(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
    
    def show_tips(self):
        tips = """
        <h3>–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</h3>
        <ul>
        <li><b>–°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞:</b> –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —à–∫–∞–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞</li>
        <li><b>–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ:</b> –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ –±–ª–æ–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏</li>
        <li><b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞:</b> –¢—è–Ω–∏—Ç–µ –∑–∞ –≤–µ—Ä—Ö–Ω—é—é/–Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –±–ª–æ–∫–∞</li>
        <li><b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b> –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –±–ª–æ–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</li>
        <li><b>–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é:</b> –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π</li>
        <li><b>–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:</b> –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç</li>
        </ul>
        """
        QMessageBox.information(self, "–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", tips)
    
    def autosave(self):
        if self.time_blocks:
            self.data_manager.save_day(self.time_blocks, self.current_date)
            self.statusBar().showMessage("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    def create_block_dialog(self):
        # –î–∏–∞–ª–æ–≥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞
        current_time = datetime.now().time()
        start_time = current_time.replace(minute=(current_time.minute // 30) * 30)
        end_time = (datetime.now() + timedelta(hours=1)).time()
        
        start_dt = datetime.combine(self.current_date, start_time)
        end_dt = datetime.combine(self.current_date, end_time)
        
        dialog = BlockCreationDialog(start_dt, end_dt, self)
        if dialog.exec_() == QDialog.Accepted:
            self.create_time_block(dialog.get_data())
    
    def closeEvent(self, event):
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        if self.time_blocks:
            self.data_manager.save_day(self.time_blocks, self.current_date)
        
        self.notification_manager.stop()
        event.accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    
    window = TimeBlockingApp()
    window.show()
    
    sys.exit(app.exec_())